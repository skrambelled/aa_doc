INTRODUCTION
-----------------------------------------------------------------------------
The following guide explains how to get started building an area in a way
that will get through the approval process much faster and easier.

Planning is the most important step; the worst thing you can do is just build
stuff and try to connect it all later. The main reason this is a problem is
because you need to build around your base files, not the other way around.
Too many coders are inefficiently coding entire areas and then realizing
later they have no base files, and fixing them is a lot more work.

BUILDING
-----------------------------------------------------------------------------
The following explains how to develop an area project from start to finish.

If you were designing a new creator-sized area, the first thing you need to
do is create a world info document which is explained in the World documents
directory. Essentially you are putting together a backstory, planning out the
area, and creating a proposal to then get feedback and pre-approval on. Then
after you get pre-approval you can begin coding. To submit your document,
head over to Atlas, the World clerk for pre-approval from World. Some
features may need an additional pre-approval from Balance.

The second thing to do before starting to code anything is to read all of the
Quality Control guides and examples on how to create standardized code. It is
much easier and faster to code a project with the standards in mind, than it
is to go back and fix everything later on. Skipping this step and ignoring
the standards will create a ton of unnecessary work for both the coder and
the Quality Control team because Quality Control will not approve projects
that do not meet the standards.

A base room is a room that contains all of the shared features of a certain
landscape. For example, if you are creating an area like Harkke Forest where
there is outdoor ground, dirt, grass, trees, and other forest features then
all of those add_senses can all be contained in a base room. This way you do
not have to re-write every sense in every room. This also means we are not
copying and pasting blocks of code into multiple files.

To expand on base files more, you can also create multiple tiers of base
files. If you have several forest rooms, use a forest base file. If there are
multiple tents that you can enter, then you need a tent base file that has
nouns like floor, walls, wall, ceiling, etcetera, all established so that you
do not need to repeat those in every tent. Below is a visual explanation of
how base files work, and how they can inherit each other.

                           BASE_room
                               |
              ---------------------------------
              |                               |
         BASE_forest                      BASE_tent
              |                               |
      -----------------                ---------------
      |               |                |             |
forest_north    forest_south       tent_large    tent_small

Once you have planned out all of your rooms in advance and created base
files, then you can start working on the rooms themselves which will not need
as much work because they already inherit so many add_senses.

Create a skeleton of your area, which means code some generic rooms and
connect them all together using add_exit. If you have any special exits such
as climbing up a cliff or entering a hole, just use 'cliff' or 'hole' as your
exit direction (you will change them later). Be sure to have each room
inherit a base room. Add some temporary short and long descriptions to each
room, such as "road" or "house". These are purely to communicate what the
room will eventually become. Then walk around your area, and use the QC hat
tool 'hatmap' feature to see how it feels to move around, and make any
corrections to the layout.

Now that you have a nice skeletal version of your area, and solid foundation
to build from, it's time to describe your rooms and change any special exits.

Next, create your monsters. If you use generic monsters, such as "a big orc"
then those are the kinds of monsters that could also use a base file if you
plan on having multiples. Again, group these up by their type, just like you
did for base rooms.

When the monsters are complete, equip them by creating weapons, armours, and
treasure objects and cloning these objects to them, and then commanding them
to wield and wear the equipment. Be sure to check that everything meets
Balance guidelines for these things. The QC hat tool 'hatcheck' can assist in
making sure the area meets the guidelines of each department.

Everyone will have their own creative process, but as you develop your area,
be sure to test each and every feature. Go into your area often and playtest
the things you are creating. Spend time exploring the area as if you were a
mortal and try to Quality Control your own project. Be sure that it all works
properly and it is highly polished before submitting it to the queue.
Unfinished projects will be returned without review.

Once your project is completely done, thoroughly playtest it again, as if you
were a mortal that knows nothing about your project and has never been to the
area before. Try to manipulate everything in each room, using all 7 senses,
and then also check for spelling errors and grammatical mistakes and fix them
as you come across them. Once you feel that your area is as good as you can
make it, and you no longer see any issues, then it is time to re-read the
Quality Control guides and examples and see if all of those requirements have
been met. Then, if possible, get another person to test your area in the same
fashion. If everything looks good then head over to the QC clerk and submit
your project.

From here the World, Quality Control, and Balance teams will take over and
begin reviewing your project. Once they have finished their reviews they will
comment on the project and give you a return (usually in order, with World
first), which will likely include things that they found which need to be
fixed. Fix everything on the list and add a comment on each issue saying that
it was fixed or add relevant information, and then resubmit the project along
with your replies by saving it with a .reply extension. If there is something
you disagree with then you can speak to your reviewer and if it cannot be
resolved there then the next step would be speaking with the Arch of that
department.

After everything has been fixed and each of the teams have given their stamp
of approval then the project will move onto Map and it will be installed into
the game at a specific coordinate and then players will be able to explore
your project!

Once your project is installed the final thing you should do is to add your
area to the Map-Book, and then post your area's world information to the
History Library. Then all that is left to do is watch the mortal chat lines,
bugs/suggestion boards, and your wizard log to see if there are any problems
with your area that mortals are finding and see if you can fix them.

OVERVIEW
-----------------------------------------------------------------------------
- Create /w/wizardname/areaname/ as your project folder.
- Create a header file (areaname_defs.h) in your project folder.
- Create /w/wizardname/areaname/approval/ to keep approval documents in.
- Create a world info file in your approval directory.
- Create /w/wizardname/areaname/room/ to put base rooms and main rooms in.
- Create /w/wizardname/areaname/monster/ to put monsters in.
- Create /w/wizardname/areaname/weapon/ to put weapons in (if relevant).
- Create /w/wizardname/areaname/armour/ to put armours in (if relevant).
- Create /w/wizardname/areaname/object/ to put objects in (if relevant).
- Create a method for entering the area, such as a workroom exit.
- Read the Quality Control guides and examples (man qc) for more information.

SEE ALSO
-----------------------------------------------------------------------------
balance, qc, world
