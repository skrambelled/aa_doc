SYNOPSIS
The following is a checklist of everything you must playtest in your area
before submitting it to the Quality Control team. Quality Control members are
not a spellcheck and playtest service, it takes dozens of hours for a member
to do a full review on a creator-sized project and it is not their
responsibility to take your project as a rough draft and turn it into a
finished product--that is your job.

Quality Control is there to make sure that nothing was accidentally
overlooked, and to check that things are standardized, logical, that the code
is sound, and a mortal will find the area to behave in expected ways. It
cannot be stressed enough that you as a coder need to thoroughly playtest
your own projects from top to bottom, or find someone that will volunteer to
do it for you, but that someone is not the Quality Control team. Everything
should already be in working order when the project is submitted.

It is always painfully obvious to Quality Control members when they receive
an area that has easily spotted errors, such as a monster with the name "An
big ogre" and when they do simple actions, such as 'get book' and it causes a
sensitive mind, that these are indications the project did not get
playtested. This is lazy and it is only going to delay your project from
seeing a timely installation, and it also slows down every other project in
the queue, causing a snowball effect that can quickly spiral out of control.

EXAMPLE
Room Checklist:
- Base files should be used for add_items on groups of similar room types.
- Check room and door exits to see that they work properly.
- Check rooms for proper light levels, outdoors, and terrain.
- Check that add_items use variations ("house", "stone house"), etcetera.
- Do not chain-load doors since it can cause an area to crash.
- If an object moves into a player's inventory it must query weight.
- Indoor rooms need add_items of ceiling, floor, and walls where appropriate.
- Mapenter rooms must also be fully designed like any traditional room.
- Most mentions of a window should use the mudlib add_window feature.
- Nouns must have an associated add_item.
- Nouns must use as many of the other senses as reasonable.
- Outdoor rooms need add_items of ground, dirt, grass, or relevant items.
- Players taking something from set_long needs to then alter the description.
- Plural nouns must include add_items for singular too.
- Query a player's body position before moving them.
- Room objects must be interactive where relevant (chests, trees, etcetera).
- Set ranger and artificer terrain in outdoor rooms (excluding mapenters).
- Sort exits and doors going from north, clockwise around the compass.
- The set_outdoors must use room.h defines and not numeric values.
- Use ability checks wherever appropriate (climbing, searching, etcetera).
- Use force_followers when moving a player and it is logical to do so.
- Use interactive messages, even if only cosmetic (You relax on the bed.)
- Water areas, such as creeks, rivers, ponds, and lakes must allow fishing.

Monster Checklist:
- All monsters must have a male or female gender except for animals/undead.
- Banish the names of monsters that you use in your projects.
- Check that monsters properly wear and wield their equipment.
- Make the area lively by giving monsters idle and combat chats.
- Monsters must only reset if they are dead--do not use add_object to clone.
- The load_a_chat should not mention weapons because they can be disarmed.
- The set_aim must use body_part.h defines and not numeric values.
- The set_race does not need to be in the set_alias too.
- When using "guard" code you must have a check for rogues to sneak past.

General Checklist:
- A player's 'look' at a room/monster/object must be at least 2-4 lines.
- All communication to a player should be consistent in the wording.
- All descriptions must be written out as complete sentences.
- Areas should include a Gaius exploration point.
- Asciiart should use both query_asciiart and preformat for compatibility.
- Avoid emotional explanation, such as "You do not feel like taking the box."
- Do not use articles (a/an/the) in the set_name or set_alias.
- Do not use autoformat functions unless necessary, such as writef and sayf.
- Do not use commas in the set_alias, even if the set_short does.
- Do not use contractions unless it is in monster speech.
- If relevant, use player class/race features, such as orcish language.
- Make intuitive clues available for mortals to solve quests/mini-quests.
- Playtest the area and explore it as if you have never been there before.
- Run a spell check and grammar check on all files.
- Syntax for actions must use all practical options (push, press, etcetera).
- The identify, smell, taste, and touch are required on all object items.
- The project must use AA measurements or no measurements at all.
- The set_name and set_alias must be lowercase.
- The set_name does not need to be in the set_alias too.
- The set_name should be a single word whenever possible.
- The set_short must be lowercase, except for proper names.
- UK spellings (colour, centre, etcetera) take precedence over US spellings.
- Use Adinos' hat tool to 'hatcheck' your project (it is slightly outdated).
- Use Paldin's balance cube to 'bal2' your monsters and items.

File Checklist:
- All files must end with a blank line at the end of file.
- All hidden "tab" characters must be cleaned from every file.
- All trailing whitespace must be cleaned from every file.
- Base files should be used to effectively remove duplication when relevant.
- Clear out any unused files, including backup files from the project folder.
- Do not use more than 1 consecutive blank line to separate code.
- Folder/File names must use snake casing (south_garden.c).
- Format code using the standards shown in the QC guides and examples.
- Remove .c from file paths in the code, such as inside clone_object.
- Use logical folder names, such as room, monster, object, armour, etcetera.
- Use only a single whitespace after punctuation in a sentence.

SEE ALSO
'man qc'
